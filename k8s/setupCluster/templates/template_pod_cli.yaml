apiVersion: v1
kind: PersistentVolume
metadata:
    name: $artifactsName
spec:
    capacity:
       storage: 500Mi
    accessModes:
       - ReadWriteMany
    nfs: 
      path: /channel-artifacts
      server: $nfs
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    namespace: $namespace
    name: $artifactsName
spec:
   accessModes:
     - ReadWriteMany
   resources:
      requests:
        storage: 10Mi

---
apiVersion: v1
kind: PersistentVolume
metadata:
    name: $orderer0pv
spec:
    capacity:
       storage: 500Mi
    accessModes:
       - ReadWriteMany
    nfs:
      path: /crypto-config/ordererOrganizations/$orderer0/msp/tlscacerts
      server: $nfs #change to your nfs server ip here
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    namespace: $namespace
    name: $orderer0pv
spec:
   accessModes:
     - ReadWriteMany
   resources:
      requests:
        storage: 10Mi

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
   namespace: $namespace
   name: $name
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
       app: cli
    spec:
      affinity:
       podAntiAffinity:
         requiredDuringSchedulingIgnoredDuringExecution:
         - labelSelector:
             matchExpressions:
             - key: "app"
               operator: In
               values:
               - cli
           topologyKey: "kubernetes.io/hostname"
       podAffinity:
         preferredDuringSchedulingIgnoredDuringExecution:
         - weight: 100
           podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "role"
                  operator: In
                  values:
                  - peer
                - key: "org"
                  operator: In
                  values:
                  - $namespace
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: $name
          image:  hyperledger/fabric-tools:x86_64-1.0.6
          env:
          
          - name: CORE_PEER_TLS_ENABLED
            value: "true"
          - name: CORE_PEER_TLS_CERT_FILE
            value: "/etc/hyperledger/fabric/tls/server.crt"
          - name: CORE_PEER_TLS_KEY_FILE
            value: "/etc/hyperledger/fabric/tls/server.key"
          - name: CORE_PEER_TLS_ROOTCERT_FILE
            value: "/etc/hyperledger/fabric/tls/ca.crt"
          - name: CORE_VM_ENDPOINT
            value: unix:///host/var/run/docker.sock
          - name: GOPATH
            value: /opt/gopath
          - name: CORE_LOGGING_LEVEL
            value: DEBUG
          - name: CORE_PEER_ID
            value: $name
          - name: CORE_PEER_ADDRESS
            value: $peerAddress
          - name: CORE_PEER_LOCALMSPID
            value: $mspid
          - name: CORE_PEER_MSPCONFIGPATH
            value: /etc/hyperledger/fabric/msp
          - name: aliyun_logs_fluentd
            value: "stdout"
          workingDir: /opt/gopath/src/github.com/hyperledger/fabric/peer
          command: [ "/bin/bash", "-c", "--" ]
          args: [ "while true; do sleep 30; done;" ]
          volumeMounts:
          # - mountPath: /opt/gopath/src/github.com/hyperledger/fabric/peer
          #   name: certificate
          #   subPath: scripts
           - mountPath: /host/var/run/
             name: run
          # - mountPath: /opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go
          #   name: certificate
          #   subPath: chaincode
           - mountPath: /etc/hyperledger/fabric/msp
             name: certificate
             subPath: $mspPath
           - mountPath: /etc/hyperledger/fabric/tls
             name: certificate
             subPath: $tlsPath
           - mountPath: /etc/hyperledger/fabric/orderertls
             name: orderercertificate
           - mountPath: /opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
             name: artifacts
      volumes:
        - name: orderercertificate
          persistentVolumeClaim:
              claimName: $orderer0pv
        - name: certificate
          persistentVolumeClaim:
              claimName: $pvName
        - name: artifacts
          persistentVolumeClaim:
              claimName: $artifactsName
        - name: run
          hostPath:
            path: /var/run 
